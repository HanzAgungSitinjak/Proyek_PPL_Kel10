{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/cjs/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,2CAAuD;AAGvD,OAAO,CAAC,OAAO,GAAG,MAAM,kBAAkB;IAGxC,YAAY,OAAgB,EAAE,IAAW,EAAE,MAA0B;QACnE,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAK,IAAI,EAAE;YAC1B,MAAM,UAAU,GAAG,eAAe,CAAC;YACnC,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,GAAG,yBAAa,UAAU,uCAAC,CAAC;YAC9D,OAAO,IAAI,eAAe,CAAC,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;QACpD,CAAC,CAAC,EAAE,CAAC;IACP,CAAC;IAED,KAAK,CAAC,aAAa,CACjB,MAA0B,EAC1B,YAAsC,EACtC,KAAe,EACf,GAAW;QAEX,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC;QACrC,OAAO,QAAQ,EAAE,aAAa,EAAE,CAAC,MAAM,EAAE,YAAY,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IACrE,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,YAAsC,EAAE,KAAe,EAAE,OAA4B;QAChG,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC;QACrC,OAAO,QAAQ,EAAE,MAAM,EAAE,CAAC,YAAY,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC1D,CAAC;CACF,CAAC;AAEF,OAAO,CAAC,QAAQ,GAAG,MAAM,mBAAmB;IAG1C,YAAY,OAAgB,EAAE,IAAW,EAAE,MAA0B;QACnE,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAK,IAAI,EAAE;YAC1B,MAAM,UAAU,GAAG,eAAe,CAAC;YACnC,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,GAAG,yBAAa,UAAU,uCAAC,CAAC;YAC9D,OAAO,IAAI,eAAe,CAAC,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;QACpD,CAAC,CAAC,EAAE,CAAC;IACP,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,MAA0B,EAAE,YAA6C;QACvF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC;QACrC,OAAO,QAAQ,EAAE,SAAS,EAAE,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IACrD,CAAC;CACF,CAAC;AAoBW,QAAA,OAAO,GAAwB,iBAAW,CAAC","sourcesContent":["import { fn as vitestFn } from '@vitest/spy';\nimport { browser as wdioBrowser } from '@wdio/globals';\nimport type { Capabilities, Services, Options } from '@wdio/types';\n\nexports.default = class CJSElectronService {\n  private instance?: Promise<Services.ServiceInstance>;\n\n  constructor(options: unknown, caps: never, config: Options.Testrunner) {\n    this.instance = (async () => {\n      const importPath = '../service.js';\n      const { default: ElectronService } = await import(importPath);\n      return new ElectronService(options, caps, config);\n    })();\n  }\n\n  async beforeSession(\n    config: Options.Testrunner,\n    capabilities: WebdriverIO.Capabilities,\n    specs: string[],\n    cid: string,\n  ) {\n    const instance = await this.instance;\n    return instance?.beforeSession?.(config, capabilities, specs, cid);\n  }\n\n  async before(capabilities: WebdriverIO.Capabilities, specs: string[], browser: WebdriverIO.Browser) {\n    const instance = await this.instance;\n    return instance?.before?.(capabilities, specs, browser);\n  }\n};\n\nexports.launcher = class CJSElectronLauncher {\n  private instance?: Promise<Services.ServiceInstance>;\n\n  constructor(options: unknown, caps: never, config: Options.Testrunner) {\n    this.instance = (async () => {\n      const importPath = '../service.js';\n      const { default: ElectronService } = await import(importPath);\n      return new ElectronService(options, caps, config);\n    })();\n  }\n\n  async onPrepare(config: Options.Testrunner, capabilities: Capabilities.RemoteCapabilities) {\n    const instance = await this.instance;\n    return instance?.onPrepare?.(config, capabilities);\n  }\n};\n\nexport interface BrowserExtension {\n  electron: {\n    api: (...arg: unknown[]) => Promise<unknown>;\n    app: (funcName: string, ...arg: unknown[]) => Promise<unknown>;\n    mainProcess: (funcName: string, ...arg: unknown[]) => Promise<unknown>;\n    browserWindow: (funcName: string, ...arg: unknown[]) => Promise<unknown>;\n    dialog: (funcName: string, ...arg: unknown[]) => Promise<unknown>;\n  };\n}\n\ndeclare global {\n  namespace WebdriverIO {\n    interface Browser extends BrowserExtension {}\n    interface MultiRemoteBrowser extends BrowserExtension {}\n  }\n  var fn: typeof vitestFn;\n}\n\nexport const browser: WebdriverIO.Browser = wdioBrowser;\n"]}