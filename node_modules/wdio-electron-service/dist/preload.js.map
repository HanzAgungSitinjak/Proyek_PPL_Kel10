{"version":3,"file":"preload.js","sourceRoot":"","sources":["../src/preload.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AACtD,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAEzC,MAAM,MAAM,GAAG,KAAK,EAAE,OAAgB,EAAE,GAAG,IAAe,EAAE,EAAE;IAC5D,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;QAC9C,MAAM,IAAI,KAAK,CAAC,YAAY,OAAO,eAAe,CAAC,CAAC;IACtD,CAAC;IACD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;QAC/B,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;IACtE,CAAC;IACD,OAAO,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;AAC9C,CAAC,CAAC;AAEF,aAAa,CAAC,iBAAiB,CAAC,cAAc,EAAE;IAC9C,OAAO,EAAE,CAAC,MAAc,EAAE,IAAe,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC;CACpF,CAAC,CAAC","sourcesContent":["import { contextBridge, ipcRenderer } from 'electron';\nimport { Channel } from './constants.js';\n\nconst invoke = async (channel: Channel, ...data: unknown[]) => {\n  if (!Object.values(Channel).includes(channel)) {\n    throw new Error(`Channel \"${channel}\" is invalid!`);\n  }\n  if (!process.env.WDIO_ELECTRON) {\n    throw new Error('Electron APIs can not be invoked outside of WDIO');\n  }\n  return ipcRenderer.invoke(channel, ...data);\n};\n\ncontextBridge.exposeInMainWorld('wdioElectron', {\n  execute: (script: string, args: unknown[]) => invoke(Channel.Execute, script, args),\n});\n"]}