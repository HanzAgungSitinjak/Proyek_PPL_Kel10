var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _ElectronWorkerService_instances, _ElectronWorkerService_browser, _ElectronWorkerService_getElectronAPI;
import log from './log.js';
import { execute } from './commands/execute.js';
import { mock } from './commands/mock.js';
import { removeMocks } from './commands/removeMocks.js';
import { mockAll } from './commands/mockAll.js';
import { CUSTOM_CAPABILITY_NAME } from './constants.js';
class ElectronWorkerService {
    constructor() {
        _ElectronWorkerService_instances.add(this);
        _ElectronWorkerService_browser.set(this, void 0);
    }
    get browser() {
        return __classPrivateFieldGet(this, _ElectronWorkerService_browser, "f");
    }
    set browser(browser) {
        __classPrivateFieldSet(this, _ElectronWorkerService_browser, browser, "f");
    }
    before(_capabilities, _specs, instance) {
        const browser = instance;
        const mrBrowser = instance;
        __classPrivateFieldSet(this, _ElectronWorkerService_browser, browser, "f");
        /**
         * add electron API to browser object
         */
        mrBrowser.electron = __classPrivateFieldGet(this, _ElectronWorkerService_instances, "m", _ElectronWorkerService_getElectronAPI).call(this);
        if (__classPrivateFieldGet(this, _ElectronWorkerService_browser, "f").isMultiremote) {
            for (const instance of mrBrowser.instances) {
                const mrInstance = mrBrowser.getInstance(instance);
                const caps = mrInstance.requestedCapabilities.alwaysMatch ||
                    mrInstance.requestedCapabilities;
                if (!caps[CUSTOM_CAPABILITY_NAME]) {
                    continue;
                }
                log.debug('Adding Electron API to browser object instance named: ', instance);
                mrInstance.electron = __classPrivateFieldGet(this, _ElectronWorkerService_instances, "m", _ElectronWorkerService_getElectronAPI).call(this);
            }
        }
    }
}
_ElectronWorkerService_browser = new WeakMap(), _ElectronWorkerService_instances = new WeakSet(), _ElectronWorkerService_getElectronAPI = function _ElectronWorkerService_getElectronAPI() {
    const api = {
        _mocks: {},
        execute: execute.bind(this),
        mock: mock.bind(this),
        mockAll: mockAll.bind(this),
        removeMocks: removeMocks.bind(this),
    };
    return Object.assign({}, api);
};
export default ElectronWorkerService;
//# sourceMappingURL=service.js.map