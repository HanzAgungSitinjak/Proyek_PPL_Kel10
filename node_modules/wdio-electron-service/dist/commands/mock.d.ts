import type { ElectronInterface } from 'src/types.js';
type MockFn = (...args: unknown[]) => unknown;
type WrappedMockFn = {
    mockReturnValue: (returnValue: unknown) => Promise<MockFn>;
    mockImplementation: (implementationFn: () => unknown) => Promise<MockFn>;
    update: () => Promise<MockFn>;
    unMock: () => Promise<void>;
} & MockFn;
export declare class ElectronServiceMock {
    #private;
    apiName: ElectronInterface;
    constructor(apiName: ElectronInterface);
    init(): Promise<Record<string, WrappedMockFn>>;
    initFn(funcName: string, mockReturnValue?: unknown): Promise<WrappedMockFn>;
    getMock(funcName?: string): Promise<MockFn>;
    unMock(funcName?: string): Promise<void>;
}
export declare function mock(apiName: string, funcName: string, mockReturnValue?: unknown): Promise<WrappedMockFn>;
export {};
//# sourceMappingURL=mock.d.ts.map