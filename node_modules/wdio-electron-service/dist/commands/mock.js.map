{"version":3,"file":"mock.js","sourceRoot":"","sources":["../../src/commands/mock.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,EAAE,EAAa,MAAM,aAAa,CAAC;AAE5C,OAAO,GAAG,MAAM,WAAW,CAAC;AAe5B,MAAM,OAAO,mBAAmB;IAI9B,YAAY,OAA0B;;QAHtC,+CAA8B;QAI5B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,uBAAA,IAAI,gCAAY,IAAI,GAAG,EAAkB,MAAA,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,IAAI;QACR,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,OAAO,CAC/C,CAAC,QAAQ,EAAE,OAAO,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAgC,CAAC,CAAC,CAAC,QAAQ,EAAE,EACzF,IAAI,CAAC,OAAO,CACb,CAAC;QAEF,MAAM,UAAU,GAAkC,UAAU;aACzD,KAAK,CAAC,GAAG,CAAC;aACV,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAEtE,KAAK,MAAM,KAAK,IAAI,UAAU,EAAE,CAAC;YAC/B,UAAU,CAAC,KAAgC,CAAC,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1E,CAAC;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,QAAgB,EAAE,eAAyB;QACtD,MAAM,IAAI,GAAG,CAAC,MAAM,uBAAA,IAAI,oEAAS,MAAb,IAAI,EAAU,QAAQ,EAAE,SAAS,EAAE,eAAe,CAAC,CAAkB,CAAC;QAC1F,IAAI,CAAC,eAAe,GAAG,KAAK,EAAE,WAAoB,EAAE,EAAE;YACpD,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC5B,OAAO,MAAM,uBAAA,IAAI,oEAAS,MAAb,IAAI,EAAU,QAAQ,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;QAC/D,CAAC,CAAC;QACF,IAAI,CAAC,kBAAkB,GAAG,KAAK,EAAE,gBAA+B,EAAE,EAAE;YAClE,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC5B,OAAO,MAAM,uBAAA,IAAI,oEAAS,MAAb,IAAI,EAAU,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QACzD,CAAC,CAAC;QACF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAChD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAE/C,OAAO,IAAI,CAAC;IACd,CAAC;IAyBD,KAAK,CAAC,OAAO,CAAC,QAAiB;QAC7B,MAAM,MAAM,GAAG,YAAY,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,QAAQ,EAAE,CAAC;QAC9D,GAAG,CAAC,KAAK,CAAC,6BAA6B,MAAM,KAAK,CAAC,CAAC;QACpD,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,2BAA2B,MAAM,GAAG,CAAC,CAAC;QACxD,CAAC;QACD,MAAM,IAAI,GAAG,uBAAA,IAAI,oCAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACzC,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,KAAK,CAAC,2BAA2B,MAAM,GAAG,CAAC,CAAC;QACxD,CAAC;QAED,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,OAAO,CAC1C,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,CAC7B,QAAQ,CAAC,OAAgC,CAAC,CAAC,QAAiD,CAAU,CAAC,IAAI;aACzG,KAAK,EACV,IAAI,CAAC,OAAO,EACZ,QAAQ,CACT,CAAC;QAEF,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,eAAe,MAAM,eAAe,CAAC,CAAC;QACxD,CAAC;QAED,iEAAiE;QACjE,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YACzB,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACzB,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,QAAiB;QAC5B,qEAAqE;QACrE,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,KAAK,MAAM,CAAC,UAAU,CAAC,IAAI,uBAAA,IAAI,oCAAS,EAAE,CAAC;gBACzC,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAChC,CAAC;YACD,OAAO;QACT,CAAC;QAED,uBAAA,IAAI,oCAAS,CAAC,MAAM,CAAC,QAAkB,CAAC,CAAC;QACzC,MAAM,OAAO,CAAC,QAAQ,CAAC,OAAO,CAC5B,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,CAE5B,QAAQ,CAAC,OAAgC,CAAC,CAAC,QAAiD,CAC7F,CAAC,MAAM,EAAE,EACZ,IAAI,CAAC,OAAO,EACZ,QAAQ,CACT,CAAC;IACJ,CAAC;CACF;6HAzEC,KAAK,uCAAU,QAAgB,EAAE,qBAA6B,GAAG,EAAE,GAAE,CAAC,EAAE,eAAyB;IAC/F,MAAM,OAAO,CAAC,QAAQ,CAAC,OAAO,CAC5B,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,EAAE;QAC3C,MAAM,WAAW,GAAG,QAAQ,CAAC,OAAgC,CAAC,CAAC;QAC/D,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;QACnD,MAAM,MAAM,GAAG,EAAE,CAAc,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;QAEzC,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QACpC,WAAW,CAAC,QAAoC,CAAC,GAAG,MAAuB,CAAC;QAC3E,WAAW,CAAC,QAAoC,CAAc,CAAC,MAAM,GAAG,GAAG,EAAE;YAC5E,WAAW,CAAC,QAAoC,CAAC,GAAG,WAAW,CAAC,QAAoC,CAAC,CAAC;QACxG,CAAC,CAAC;IACJ,CAAC,EACD,IAAI,CAAC,OAAO,EACZ,QAAQ,EACR,eAAe,CAChB,CAAC;IACF,MAAM,MAAM,GAAG,EAAE,CAAC,kBAAkB,CAAW,CAAC;IAChD,uBAAA,IAAI,oCAAS,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAEpC,OAAO,MAAM,CAAC;AAChB,CAAC;AAsDH,MAAM,CAAC,KAAK,UAAU,IAAI,CAAC,OAAe,EAAE,QAAgB,EAAE,eAAyB;IACrF,MAAM,mBAAmB,GAAG,IAAI,mBAAmB,CAAC,OAA4B,CAAC,CAAC;IAElF,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,mBAAmB,CAAC;IAEvD,OAAO,MAAM,mBAAmB,CAAC,MAAM,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;AACrE,CAAC","sourcesContent":["import { fn, type Mock } from '@vitest/spy';\n\nimport log from '../log.js';\nimport type { ElectronInterface, ElectronType } from 'src/types.js';\n\ntype ElectronApiFn = ElectronType[ElectronInterface][keyof ElectronType[ElectronInterface]];\ntype MockFn = (...args: unknown[]) => unknown;\ntype WrappedMockFn = {\n  mockReturnValue: (returnValue: unknown) => Promise<MockFn>;\n  mockImplementation: (implementationFn: () => unknown) => Promise<MockFn>;\n  update: () => Promise<MockFn>;\n  unMock: () => Promise<void>;\n} & MockFn;\ntype MockedFn = {\n  revert: () => void;\n};\n\nexport class ElectronServiceMock {\n  #mockFns: Map<string, MockFn>;\n  apiName: ElectronInterface;\n\n  constructor(apiName: ElectronInterface) {\n    this.apiName = apiName;\n    this.#mockFns = new Map<string, MockFn>();\n  }\n\n  async init(): Promise<Record<string, WrappedMockFn>> {\n    const apiFnNames = await browser.electron.execute(\n      (electron, apiName) => Object.keys(electron[apiName as keyof typeof electron]).toString(),\n      this.apiName,\n    );\n\n    const mockedApis: Record<string, WrappedMockFn> = apiFnNames\n      .split(',')\n      .reduce((a, funcName) => ({ ...a, [funcName]: 'placeholder' }), {});\n\n    for (const apiFn in mockedApis) {\n      mockedApis[apiFn as keyof typeof mockedApis] = await this.initFn(apiFn);\n    }\n\n    return mockedApis;\n  }\n\n  async initFn(funcName: string, mockReturnValue?: unknown): Promise<WrappedMockFn> {\n    const mock = (await this.#setMock(funcName, undefined, mockReturnValue)) as WrappedMockFn;\n    mock.mockReturnValue = async (returnValue: unknown) => {\n      await this.unMock(funcName);\n      return await this.#setMock(funcName, undefined, returnValue);\n    };\n    mock.mockImplementation = async (implementationFn: () => unknown) => {\n      await this.unMock(funcName);\n      return await this.#setMock(funcName, implementationFn);\n    };\n    mock.update = this.getMock.bind(this, funcName);\n    mock.unMock = this.unMock.bind(this, funcName);\n\n    return mock;\n  }\n\n  async #setMock(funcName: string, mockImplementation: MockFn = () => {}, mockReturnValue?: unknown): Promise<MockFn> {\n    await browser.electron.execute(\n      (electron, apiName, funcName, returnValue) => {\n        const electronApi = electron[apiName as keyof typeof electron];\n        const originalApi = Object.assign({}, electronApi);\n        const mockFn = fn<[], unknown>(() => {});\n\n        mockFn.mockReturnValue(returnValue);\n        electronApi[funcName as keyof typeof electronApi] = mockFn as ElectronApiFn;\n        (electronApi[funcName as keyof typeof electronApi] as MockedFn).revert = () => {\n          electronApi[funcName as keyof typeof electronApi] = originalApi[funcName as keyof typeof originalApi];\n        };\n      },\n      this.apiName,\n      funcName,\n      mockReturnValue,\n    );\n    const mockFn = fn(mockImplementation) as MockFn;\n    this.#mockFns.set(funcName, mockFn);\n\n    return mockFn;\n  }\n\n  async getMock(funcName?: string) {\n    const mockId = `electron.${String(this.apiName)}.${funcName}`;\n    log.debug(`getting mock instance for ${mockId}...`);\n    if (!funcName) {\n      throw new Error(`No mock registered for \"${mockId}\"`);\n    }\n    const mock = this.#mockFns.get(funcName);\n    if (!mock) {\n      throw new Error(`No mock registered for \"${mockId}\"`);\n    }\n\n    const calls = await browser.electron.execute(\n      (electron, apiName, funcName) =>\n        (electron[apiName as keyof typeof electron][funcName as keyof ElectronType[ElectronInterface]] as Mock).mock\n          .calls,\n      this.apiName,\n      funcName,\n    );\n\n    if (!calls) {\n      throw new Error(`No mock for ${mockId}() was found!`);\n    }\n\n    // re-apply calls from the electron main process mock to this one\n    for (const call of calls) {\n      mock.apply(mock, call);\n    }\n\n    return mock;\n  }\n\n  async unMock(funcName?: string) {\n    // when funcName is unspecified we unmock all of the mocked functions\n    if (!funcName) {\n      for (const [mockFnName] of this.#mockFns) {\n        await this.unMock(mockFnName);\n      }\n      return;\n    }\n\n    this.#mockFns.delete(funcName as string);\n    await browser.electron.execute(\n      (electron, apiName, funcName) =>\n        (\n          electron[apiName as keyof typeof electron][funcName as keyof ElectronType[ElectronInterface]] as MockedFn\n        ).revert(),\n      this.apiName,\n      funcName,\n    );\n  }\n}\n\nexport async function mock(apiName: string, funcName: string, mockReturnValue?: unknown) {\n  const electronServiceMock = new ElectronServiceMock(apiName as ElectronInterface);\n\n  browser.electron._mocks[apiName] = electronServiceMock;\n\n  return await electronServiceMock.initFn(funcName, mockReturnValue);\n}\n"]}