{"version":3,"file":"service.js","sourceRoot":"","sources":["../src/service.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,OAAO,GAAG,MAAM,UAAU,CAAC;AAC3B,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAChD,OAAO,EAAuB,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAC/D,OAAO,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAC;AACxD,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAChD,OAAO,EAAE,sBAAsB,EAAE,MAAM,gBAAgB,CAAC;AAGxD,MAAqB,qBAAqB;IAGxC;;QAFA,iDAAgE;IAEjD,CAAC;IAEhB,IAAI,OAAO;QACT,OAAO,uBAAA,IAAI,sCAAS,CAAC;IACvB,CAAC;IAED,IAAI,OAAO,CAAC,OAAO;QACjB,uBAAA,IAAI,kCAAY,OAAO,MAAA,CAAC;IAC1B,CAAC;IAaD,MAAM,CACJ,aAA4C,EAC5C,MAAgB,EAChB,QAA8D;QAE9D,MAAM,OAAO,GAAG,QAA+B,CAAC;QAChD,MAAM,SAAS,GAAG,QAA0C,CAAC;QAC7D,uBAAA,IAAI,kCAAY,OAAO,MAAA,CAAC;QAExB;;WAEG;QACH,SAAS,CAAC,QAAQ,GAAG,uBAAA,IAAI,+EAAgB,MAApB,IAAI,CAAkB,CAAC;QAC5C,IAAI,uBAAA,IAAI,sCAAS,CAAC,aAAa,EAAE,CAAC;YAChC,KAAK,MAAM,QAAQ,IAAI,SAAS,CAAC,SAAS,EAAE,CAAC;gBAC3C,MAAM,UAAU,GAAG,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;gBACnD,MAAM,IAAI,GACP,UAAU,CAAC,qBAAsD,CAAC,WAAW;oBAC7E,UAAU,CAAC,qBAAkD,CAAC;gBAEjE,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,EAAE,CAAC;oBAClC,SAAS;gBACX,CAAC;gBACD,GAAG,CAAC,KAAK,CAAC,wDAAwD,EAAE,QAAQ,CAAC,CAAC;gBAC9E,UAAU,CAAC,QAAQ,GAAG,uBAAA,IAAI,+EAAgB,MAApB,IAAI,CAAkB,CAAC;YAC/C,CAAC;QACH,CAAC;IACH,CAAC;CACF;;IAtCG,MAAM,GAAG,GAAG;QACV,MAAM,EAAE,EAAyC;QACjD,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;QAC3B,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;QACrB,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;QAC3B,WAAW,EAAE,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;KACpC,CAAC;IACF,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAuB,CAAC;AACtD,CAAC;eAtBkB,qBAAqB","sourcesContent":["import type { Capabilities, Services } from '@wdio/types';\n\nimport log from './log.js';\nimport { execute } from './commands/execute.js';\nimport { ElectronServiceMock, mock } from './commands/mock.js';\nimport { removeMocks } from './commands/removeMocks.js';\nimport { mockAll } from './commands/mockAll.js';\nimport { CUSTOM_CAPABILITY_NAME } from './constants.js';\nimport type { ElectronServiceAPI } from './types.js';\n\nexport default class ElectronWorkerService implements Services.ServiceInstance {\n  #browser?: WebdriverIO.Browser | WebdriverIO.MultiRemoteBrowser;\n\n  constructor() {}\n\n  get browser() {\n    return this.#browser;\n  }\n\n  set browser(browser) {\n    this.#browser = browser;\n  }\n\n  #getElectronAPI() {\n    const api = {\n      _mocks: {} as Record<string, ElectronServiceMock>,\n      execute: execute.bind(this),\n      mock: mock.bind(this),\n      mockAll: mockAll.bind(this),\n      removeMocks: removeMocks.bind(this),\n    };\n    return Object.assign({}, api) as ElectronServiceAPI;\n  }\n\n  before(\n    _capabilities: Capabilities.RemoteCapability,\n    _specs: string[],\n    instance: WebdriverIO.Browser | WebdriverIO.MultiRemoteBrowser,\n  ): void {\n    const browser = instance as WebdriverIO.Browser;\n    const mrBrowser = instance as WebdriverIO.MultiRemoteBrowser;\n    this.#browser = browser;\n\n    /**\n     * add electron API to browser object\n     */\n    mrBrowser.electron = this.#getElectronAPI();\n    if (this.#browser.isMultiremote) {\n      for (const instance of mrBrowser.instances) {\n        const mrInstance = mrBrowser.getInstance(instance);\n        const caps =\n          (mrInstance.requestedCapabilities as Capabilities.W3CCapabilities).alwaysMatch ||\n          (mrInstance.requestedCapabilities as WebdriverIO.Capabilities);\n\n        if (!caps[CUSTOM_CAPABILITY_NAME]) {\n          continue;\n        }\n        log.debug('Adding Electron API to browser object instance named: ', instance);\n        mrInstance.electron = this.#getElectronAPI();\n      }\n    }\n  }\n}\n"]}