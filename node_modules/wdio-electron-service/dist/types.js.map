{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"AAEA,OAAO,qBAAqB,MAAM,eAAe,CAAC;AAClD,OAAO,qBAAqB,MAAM,cAAc,CAAC;AAIjD;;GAEG;AACH,OAAO,CAAC,GAAG,CAAC,aAAa,GAAG,MAAM,CAAC;AAEnC,MAAM,CAAC,MAAM,QAAQ,GAAG,qBAAqB,CAAC;AAC9C,eAAe,qBAAqB,CAAC","sourcesContent":["import type * as Electron from 'electron';\n\nimport ElectronLaunchService from './launcher.js';\nimport ElectronWorkerService from './service.js';\nimport type { Channel } from './constants.js';\nimport type { ElectronServiceMock } from './commands/mock.js';\n\n/**\n * set this environment variable so that the preload script can be loaded\n */\nprocess.env.WDIO_ELECTRON = 'true';\n\nexport const launcher = ElectronLaunchService;\nexport default ElectronWorkerService;\n\ntype MockFn = (...args: unknown[]) => unknown;\ntype WrappedMockFn = {\n  mockReturnValue: (returnValue: unknown) => Promise<MockFn>;\n  mockImplementation: (implementationFn: () => unknown) => Promise<MockFn>;\n  update: () => Promise<MockFn>;\n  unMock: () => Promise<void>;\n} & MockFn;\n\nexport interface ElectronServiceAPI {\n  /**\n   * Used internally for storing mock objects\n   */\n  _mocks: Record<string, ElectronServiceMock>;\n  /**\n   * Mock a function from the Electron API.\n   * @param apiName name of the API to mock\n   * @param funcName name of the function to mock\n   * @param mockReturnValue value to return when the mocked function is called\n   * @returns a {@link Promise} that resolves once the mock is registered\n   *\n   * @example\n   * ```js\n   * // mock the dialog API showOpenDialog method\n   * const showOpenDialog = await browser.electron.mock('dialog', 'showOpenDialog');\n   * await browser.electron.execute(\n   *   async (electron) =>\n   *     await electron.dialog.showOpenDialog({\n   *       properties: ['openFile', 'openDirectory'],\n   *     }),\n   * );\n   *\n   * const mockedShowOpenDialog = await showOpenDialog.update();\n   * expect(mockedShowOpenDialog).toHaveBeenCalledTimes(1);\n   * expect(mockedShowOpenDialog).toHaveBeenCalledWith({\n   *   properties: ['openFile', 'openDirectory'],\n   * });\n   * ```\n   */\n  mock: <Interface extends ElectronInterface>(\n    apiName: Interface,\n    funcName?: string,\n    returnValue?: unknown,\n  ) => Promise<WrappedMockFn>;\n  /**\n   * Mock all functions from an Electron API.\n   * @param apiName name of the API to mock\n   * @returns a {@link Promise} that resolves once the mock is registered\n   *\n   * @example\n   * ```js\n   * // mock multiple functions from the app API\n   * const app = await browser.electron.mockAll('app');\n   * await app.getName.mockReturnValue('mocked-app');\n   * await app.getVersion.mockReturnValue('1.0.0-mocked.12');\n   * const result = await browser.electron.execute((electron) => `${electron.app.getName()}::${electron.app.getVersion()}`);\n   * expect(result).toEqual('mocked-app::1.0.0-mocked.12');\n   * ```\n   */\n  mockAll: <Interface extends ElectronInterface>(apiName: Interface) => Promise<Record<string, WrappedMockFn>>;\n  /**\n   * Execute a function within the Electron main process.\n   *\n   * @example\n   * ```js\n   * await browser.electron.execute((electron, param1, param2, param3) => {\n   *   const appWindow = electron.BrowserWindow.getFocusedWindow();\n   *   electron.dialog.showMessageBox(appWindow, {\n   *     message: 'Hello World!',\n   *     detail: `${param1} + ${param2} + ${param3} = ${param1 + param2 + param3}`\n   *   });\n   * }, 1, 2, 3)\n   * ```\n   *\n   * @param script function to execute\n   * @param args function arguments\n   */\n  execute<ReturnValue, InnerArguments extends unknown[]>(\n    script: string | ((electron: typeof Electron, ...innerArgs: InnerArguments) => ReturnValue),\n    ...args: InnerArguments\n  ): Promise<ReturnValue>;\n  /**\n   * Remove mocked function(s)\n   *\n   * @example\n   * ```js\n   * // removes all mocked functions\n   * await browser.electron.removeMocks()\n   * // removes all mocked functions of dialog API\n   * await browser.electron.removeMocks('dialog')\n   * ```\n   *\n   * @param apiName mocked api to remove\n   */\n  removeMocks: (apiName?: string) => Promise<void>;\n}\n\n/**\n * The options for the ElectronService.\n */\nexport interface ElectronServiceOptions {\n  /**\n   * The path to the electron binary of the app for testing.\n   */\n  appBinaryPath?: string;\n  /**\n   * An array of string arguments to be passed through to the app on execution of the test run.\n   * Electron [command line switches](https://www.electronjs.org/docs/latest/api/command-line-switches)\n   * and some [Chromium switches](https://peter.sh/experiments/chromium-command-line-switches) can be\n   * used here.\n   */\n  appArgs?: string[];\n  /**\n   * The browser command used to access the custom electron API.\n   * @default api\n   */\n  customApiBrowserCommand?: string;\n}\n\nexport type ApiCommand = { name: string; bridgeProp: string };\nexport type WebdriverClientFunc = (this: WebdriverIO.Browser, ...args: unknown[]) => Promise<unknown>;\n\nexport type ElectronType = typeof Electron;\nexport type ElectronInterface = keyof ElectronType;\n\nexport type ElectronBuilderConfig = {\n  productName?: string;\n  directories?: { output?: string };\n};\n\nexport type ElectronForgeConfig = {\n  buildIdentifier: string;\n  packagerConfig: { name: string };\n};\n\nexport type AppBuildInfo = {\n  appName: string;\n  config: string | ElectronForgeConfig | ElectronBuilderConfig;\n  isBuilder: boolean;\n  isForge: boolean;\n};\n\nexport type ValidChannels = `${Channel}`;\n"]}